// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum BarcodeFormat {
  aztec,
  codabar,
  code39,
  code93,
  code128,
  dataMatrix,
  ean8,
  ean13,
  pdf417,
  qrCode,
  upcA,
  upcE,
  itf,
}

enum CameraLensDirection {
  front,
  back,
  ext,
  unknown,
}

class CameraOpenResponse {
  CameraOpenResponse({
    this.supportsFlash,
    this.height,
    this.width,
    this.textureId,
  });

  bool? supportsFlash;

  int? height;

  int? width;

  String? textureId;

  Object encode() {
    return <Object?>[
      supportsFlash,
      height,
      width,
      textureId,
    ];
  }

  static CameraOpenResponse decode(Object result) {
    result as List<Object?>;
    return CameraOpenResponse(
      supportsFlash: result[0] as bool?,
      height: result[1] as int?,
      width: result[2] as int?,
      textureId: result[3] as String?,
    );
  }
}

class DetectedBarcode {
  DetectedBarcode({
    this.rawValue,
    this.cornerPoints,
    this.format,
    this.textValue,
  });

  String? rawValue;

  List<CornerPoint?>? cornerPoints;

  BarcodeFormat? format;

  String? textValue;

  Object encode() {
    return <Object?>[
      rawValue,
      cornerPoints,
      format?.index,
      textValue,
    ];
  }

  static DetectedBarcode decode(Object result) {
    result as List<Object?>;
    return DetectedBarcode(
      rawValue: result[0] as String?,
      cornerPoints: (result[1] as List<Object?>?)?.cast<CornerPoint?>(),
      format:
          result[2] != null ? BarcodeFormat.values[result[2]! as int] : null,
      textValue: result[3] as String?,
    );
  }
}

class CornerPoint {
  CornerPoint({
    required this.x,
    required this.y,
  });

  double x;

  double y;

  Object encode() {
    return <Object?>[
      x,
      y,
    ];
  }

  static CornerPoint decode(Object result) {
    result as List<Object?>;
    return CornerPoint(
      x: result[0]! as double,
      y: result[1]! as double,
    );
  }
}

class _BarcodeKitHostApiCodec extends StandardMessageCodec {
  const _BarcodeKitHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CameraOpenResponse) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return CameraOpenResponse.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class BarcodeKitHostApi {
  /// Constructor for [BarcodeKitHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  BarcodeKitHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _BarcodeKitHostApiCodec();

  Future<CameraOpenResponse> openCamera(
      CameraLensDirection arg_direction, List<int?> arg_formats) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.barcode_kit.BarcodeKitHostApi.openCamera', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel
        .send(<Object?>[arg_direction.index, arg_formats]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as CameraOpenResponse?)!;
    }
  }

  Future<void> setOCREnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.barcode_kit.BarcodeKitHostApi.setOCREnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> closeCamera() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.barcode_kit.BarcodeKitHostApi.closeCamera', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> pauseCamera() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.barcode_kit.BarcodeKitHostApi.pauseCamera', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> resumeCamera() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.barcode_kit.BarcodeKitHostApi.resumeCamera', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setTorch(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.barcode_kit.BarcodeKitHostApi.setTorch', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _BarcodeKitFlutterApiCodec extends StandardMessageCodec {
  const _BarcodeKitFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CornerPoint) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is DetectedBarcode) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return CornerPoint.decode(readValue(buffer)!);
      case 129:
        return DetectedBarcode.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class BarcodeKitFlutterApi {
  static const MessageCodec<Object?> codec = _BarcodeKitFlutterApiCodec();

  /// Called from the host when a barcode is detected.
  void onBarcodeScanned(DetectedBarcode barcode);

  /// Called from the host when text is detected.
  void onTextDetected(String text);

  /// Called from the host when the torch state changes.
  void onTorchStateChanged(bool enabled);

  static void setup(BarcodeKitFlutterApi? api,
      {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.barcode_kit.BarcodeKitFlutterApi.onBarcodeScanned',
          codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.barcode_kit.BarcodeKitFlutterApi.onBarcodeScanned was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final DetectedBarcode? arg_barcode = (args[0] as DetectedBarcode?);
          assert(arg_barcode != null,
              'Argument for dev.flutter.pigeon.barcode_kit.BarcodeKitFlutterApi.onBarcodeScanned was null, expected non-null DetectedBarcode.');
          api.onBarcodeScanned(arg_barcode!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.barcode_kit.BarcodeKitFlutterApi.onTextDetected',
          codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.barcode_kit.BarcodeKitFlutterApi.onTextDetected was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_text = (args[0] as String?);
          assert(arg_text != null,
              'Argument for dev.flutter.pigeon.barcode_kit.BarcodeKitFlutterApi.onTextDetected was null, expected non-null String.');
          api.onTextDetected(arg_text!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.barcode_kit.BarcodeKitFlutterApi.onTorchStateChanged',
          codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.barcode_kit.BarcodeKitFlutterApi.onTorchStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_enabled = (args[0] as bool?);
          assert(arg_enabled != null,
              'Argument for dev.flutter.pigeon.barcode_kit.BarcodeKitFlutterApi.onTorchStateChanged was null, expected non-null bool.');
          api.onTorchStateChanged(arg_enabled!);
          return;
        });
      }
    }
  }
}
