// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum BarcodeFormat: Int {
  case aztec = 0
  case codabar = 1
  case code39 = 2
  case code93 = 3
  case code128 = 4
  case dataMatrix = 5
  case ean8 = 6
  case ean13 = 7
  case pdf417 = 8
  case qrCode = 9
  case upcA = 10
  case upcE = 11
  case itf = 12
}

enum CameraLensDirection: Int {
  case front = 0
  case back = 1
  case ext = 2
  case unknown = 3
}

/// Generated class from Pigeon that represents data sent in messages.
struct CameraOpenResponse {
  var supportsFlash: Bool? = nil
  var height: Int64? = nil
  var width: Int64? = nil
  var textureId: String? = nil

  static func fromList(_ list: [Any?]) -> CameraOpenResponse? {
    let supportsFlash: Bool? = nilOrValue(list[0])
    let height: Int64? = list[1] is NSNull ? nil : (list[1] is Int64? ? list[1] as! Int64? : Int64(list[1] as! Int32))
    let width: Int64? = list[2] is NSNull ? nil : (list[2] is Int64? ? list[2] as! Int64? : Int64(list[2] as! Int32))
    let textureId: String? = nilOrValue(list[3])

    return CameraOpenResponse(
      supportsFlash: supportsFlash,
      height: height,
      width: width,
      textureId: textureId
    )
  }
  func toList() -> [Any?] {
    return [
      supportsFlash,
      height,
      width,
      textureId,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct DetectedBarcode {
  var rawValue: String? = nil
  var cornerPoints: [CornerPoint?]? = nil
  var format: BarcodeFormat? = nil
  var textValue: String? = nil

  static func fromList(_ list: [Any?]) -> DetectedBarcode? {
    let rawValue: String? = nilOrValue(list[0])
    let cornerPoints: [CornerPoint?]? = nilOrValue(list[1])
    var format: BarcodeFormat? = nil
    let formatEnumVal: Int? = nilOrValue(list[2])
    if let formatRawValue = formatEnumVal {
      format = BarcodeFormat(rawValue: formatRawValue)!
    }
    let textValue: String? = nilOrValue(list[3])

    return DetectedBarcode(
      rawValue: rawValue,
      cornerPoints: cornerPoints,
      format: format,
      textValue: textValue
    )
  }
  func toList() -> [Any?] {
    return [
      rawValue,
      cornerPoints,
      format?.rawValue,
      textValue,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct CornerPoint {
  var x: Double
  var y: Double

  static func fromList(_ list: [Any?]) -> CornerPoint? {
    let x = list[0] as! Double
    let y = list[1] as! Double

    return CornerPoint(
      x: x,
      y: y
    )
  }
  func toList() -> [Any?] {
    return [
      x,
      y,
    ]
  }
}

private class BarcodeKitHostApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return CameraOpenResponse.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class BarcodeKitHostApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? CameraOpenResponse {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class BarcodeKitHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return BarcodeKitHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return BarcodeKitHostApiCodecWriter(data: data)
  }
}

class BarcodeKitHostApiCodec: FlutterStandardMessageCodec {
  static let shared = BarcodeKitHostApiCodec(readerWriter: BarcodeKitHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol BarcodeKitHostApi {
  func openCamera(direction: CameraLensDirection, formats: [Int64], completion: @escaping (Result<CameraOpenResponse, Error>) -> Void)
  func setOCREnabled(enabled: Bool) throws
  func closeCamera() throws
  func pauseCamera() throws
  func resumeCamera() throws
  func setTorch(enabled: Bool) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class BarcodeKitHostApiSetup {
  /// The codec used by BarcodeKitHostApi.
  static var codec: FlutterStandardMessageCodec { BarcodeKitHostApiCodec.shared }
  /// Sets up an instance of `BarcodeKitHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: BarcodeKitHostApi?) {
    let openCameraChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.barcode_kit.BarcodeKitHostApi.openCamera", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      openCameraChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let directionArg = CameraLensDirection(rawValue: args[0] as! Int)!
        let formatsArg = args[1] as! [Int64]
        api.openCamera(direction: directionArg, formats: formatsArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      openCameraChannel.setMessageHandler(nil)
    }
    let setOCREnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.barcode_kit.BarcodeKitHostApi.setOCREnabled", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setOCREnabledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enabledArg = args[0] as! Bool
        do {
          try api.setOCREnabled(enabled: enabledArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setOCREnabledChannel.setMessageHandler(nil)
    }
    let closeCameraChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.barcode_kit.BarcodeKitHostApi.closeCamera", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      closeCameraChannel.setMessageHandler { _, reply in
        do {
          try api.closeCamera()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      closeCameraChannel.setMessageHandler(nil)
    }
    let pauseCameraChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.barcode_kit.BarcodeKitHostApi.pauseCamera", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pauseCameraChannel.setMessageHandler { _, reply in
        do {
          try api.pauseCamera()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pauseCameraChannel.setMessageHandler(nil)
    }
    let resumeCameraChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.barcode_kit.BarcodeKitHostApi.resumeCamera", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      resumeCameraChannel.setMessageHandler { _, reply in
        do {
          try api.resumeCamera()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      resumeCameraChannel.setMessageHandler(nil)
    }
    let setTorchChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.barcode_kit.BarcodeKitHostApi.setTorch", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setTorchChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enabledArg = args[0] as! Bool
        do {
          try api.setTorch(enabled: enabledArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setTorchChannel.setMessageHandler(nil)
    }
  }
}
private class BarcodeKitFlutterApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return CornerPoint.fromList(self.readValue() as! [Any?])
      case 129:
        return DetectedBarcode.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class BarcodeKitFlutterApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? CornerPoint {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? DetectedBarcode {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class BarcodeKitFlutterApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return BarcodeKitFlutterApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return BarcodeKitFlutterApiCodecWriter(data: data)
  }
}

class BarcodeKitFlutterApiCodec: FlutterStandardMessageCodec {
  static let shared = BarcodeKitFlutterApiCodec(readerWriter: BarcodeKitFlutterApiCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class BarcodeKitFlutterApi {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return BarcodeKitFlutterApiCodec.shared
  }
  /// Caleld from the host when a barcode is detected.
  func onBarcodeScanned(barcode barcodeArg: DetectedBarcode, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.barcode_kit.BarcodeKitFlutterApi.onBarcodeScanned", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([barcodeArg] as [Any?]) { _ in
      completion()
    }
  }
  /// Called from the host when text is detected.
  func onTextDetected(text textArg: String, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.barcode_kit.BarcodeKitFlutterApi.onTextDetected", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([textArg] as [Any?]) { _ in
      completion()
    }
  }
  /// Called from the host when the torch state changes.
  func onTorchStateChanged(enabled enabledArg: Bool, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.barcode_kit.BarcodeKitFlutterApi.onTorchStateChanged", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([enabledArg] as [Any?]) { _ in
      completion()
    }
  }
}
