// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class BarcodeFormat(val raw: Int) {
  AZTEC(0),
  CODABAR(1),
  CODE39(2),
  CODE93(3),
  CODE128(4),
  DATAMATRIX(5),
  EAN8(6),
  EAN13(7),
  PDF417(8),
  QRCODE(9),
  UPCA(10),
  UPCE(11),
  ITF(12);

  companion object {
    fun ofRaw(raw: Int): BarcodeFormat? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class CameraLensDirection(val raw: Int) {
  FRONT(0),
  BACK(1),
  EXT(2),
  UNKNOWN(3);

  companion object {
    fun ofRaw(raw: Int): CameraLensDirection? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CameraOpenResponse (
  val supportsFlash: Boolean? = null,
  val height: Long? = null,
  val width: Long? = null,
  val textureId: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): CameraOpenResponse {
      val supportsFlash = list[0] as Boolean?
      val height = list[1].let { if (it is Int) it.toLong() else it as Long? }
      val width = list[2].let { if (it is Int) it.toLong() else it as Long? }
      val textureId = list[3] as String?
      return CameraOpenResponse(supportsFlash, height, width, textureId)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      supportsFlash,
      height,
      width,
      textureId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class DetectedBarcode (
  val rawValue: String? = null,
  val cornerPoints: List<CornerPoint?>? = null,
  val format: BarcodeFormat? = null,
  val textValue: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): DetectedBarcode {
      val rawValue = list[0] as String?
      val cornerPoints = list[1] as List<CornerPoint?>?
      val format: BarcodeFormat? = (list[2] as Int?)?.let {
        BarcodeFormat.ofRaw(it)
      }
      val textValue = list[3] as String?
      return DetectedBarcode(rawValue, cornerPoints, format, textValue)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      rawValue,
      cornerPoints,
      format?.raw,
      textValue,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CornerPoint (
  val x: Double,
  val y: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): CornerPoint {
      val x = list[0] as Double
      val y = list[1] as Double
      return CornerPoint(x, y)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      x,
      y,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object BarcodeKitHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CameraOpenResponse.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is CameraOpenResponse -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface BarcodeKitHostApi {
  fun openCamera(direction: CameraLensDirection, formats: List<Long>, callback: (Result<CameraOpenResponse>) -> Unit)
  fun setOCREnabled(enabled: Boolean)
  fun closeCamera()
  fun pauseCamera()
  fun resumeCamera()
  fun setTorch(enabled: Boolean)

  companion object {
    /** The codec used by BarcodeKitHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      BarcodeKitHostApiCodec
    }
    /** Sets up an instance of `BarcodeKitHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: BarcodeKitHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.barcode_kit.BarcodeKitHostApi.openCamera", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val directionArg = CameraLensDirection.ofRaw(args[0] as Int)!!
            val formatsArg = args[1] as List<Long>
            api.openCamera(directionArg, formatsArg) { result: Result<CameraOpenResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.barcode_kit.BarcodeKitHostApi.setOCREnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val enabledArg = args[0] as Boolean
            var wrapped: List<Any?>
            try {
              api.setOCREnabled(enabledArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.barcode_kit.BarcodeKitHostApi.closeCamera", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.closeCamera()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.barcode_kit.BarcodeKitHostApi.pauseCamera", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.pauseCamera()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.barcode_kit.BarcodeKitHostApi.resumeCamera", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.resumeCamera()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.barcode_kit.BarcodeKitHostApi.setTorch", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val enabledArg = args[0] as Boolean
            var wrapped: List<Any?>
            try {
              api.setTorch(enabledArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object BarcodeKitFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CornerPoint.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          DetectedBarcode.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is CornerPoint -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is DetectedBarcode -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class BarcodeKitFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by BarcodeKitFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      BarcodeKitFlutterApiCodec
    }
  }
  /** Caleld from the host when a barcode is detected. */
  fun onBarcodeScanned(barcodeArg: DetectedBarcode, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.barcode_kit.BarcodeKitFlutterApi.onBarcodeScanned", codec)
    channel.send(listOf(barcodeArg)) {
      callback()
    }
  }
  /** Called from the host when text is detected. */
  fun onTextDetected(textArg: String, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.barcode_kit.BarcodeKitFlutterApi.onTextDetected", codec)
    channel.send(listOf(textArg)) {
      callback()
    }
  }
  /** Called from the host when the torch state changes. */
  fun onTorchStateChanged(enabledArg: Boolean, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.barcode_kit.BarcodeKitFlutterApi.onTorchStateChanged", codec)
    channel.send(listOf(enabledArg)) {
      callback()
    }
  }
}
